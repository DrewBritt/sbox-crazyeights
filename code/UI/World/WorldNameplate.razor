@using System;
@using Sandbox;
@using Sandbox.UI;
@inherits WorldPanel;
@attribute [StyleSheet("/UI/World/WorldNameplate.scss")]
@namespace CrazyEights.UI

<root>
    <label @ref=Voice class="voice">🎙</label>
    <div @ref=Container class="container">
        <image class="avatar" style="background-image: url(avatarbig:@Player.Client.SteamId)"></image>
        <label class="name">@Player.Client.Name.Truncate(10, "..")</label>
    </div>
</root>

@code
{
    private CrazyEights.Player Player;
    private Label Voice { get; set; }
    private Panel Container { get; set; }

    public WorldNameplate(CrazyEights.Player player)
    {
        Player = player;
    }

    protected override void OnAfterTreeRender(bool firstTime)
    {
        if (!firstTime) return;
        var width = 1000;
        var height = 600;
        PanelBounds = new Rect(-width * .5f, -height * .5f, width, height);

        Voice.BindClass("active", () => Player.Client?.Voice.LastHeard < .2f);
        Container.BindClass("active", () => Appeared <= .2f || Player == CrazyEights.GameManager.Current.CurrentPlayer);
        Container.BindClass("currentPlayer", () => Player == CrazyEights.GameManager.Current.CurrentPlayer);
    }

    TimeSince Appeared = 0;
    public void Activate() => Appeared = 0;

    [GameEvent.Client.Frame]
    private void OnFrame()
    {
        if(!Player.IsValid()) return;
        if(!Player.Client.IsValid()) return;

        Position = Player.Position + Vector3.Up * 65f;
        Rotation = Rotation.LookAt(-Screen.GetDirection(new Vector2(Screen.Width * 0.5f, Screen.Height * 0.5f)));
    }

    protected override int BuildHash()
    {
        return HashCode.Combine(Player.Client);
    }
}